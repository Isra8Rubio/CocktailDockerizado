@page "/reset-password"
@attribute [AllowAnonymous]

@using API.APIService
@using Blazored.FluentValidation
@using Microsoft.Extensions.Localization
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Forms
@using BlazorCocktails.Client.Models
@using BlazorCocktails.Client.Shared.Helper

@inject APIClient Api
@inject ISnackbar Snackbar
@inject NavigationManager Nav
@inject IStringLocalizer<App> L

<PageTitle>@L["Password_ResetTitle"]</PageTitle>

<MudPaper Class="auth-page--paper" Elevation="0" Square="true">
    <div class="auth-card">
        <div class="bg-gradient-auth">
            <MudText Typo="Typo.h5">@L["Password_ResetTitle"]</MudText>
        </div>

        <div class="pa-6">
            @if (!_hasQueryParams)
            {
                <MudAlert Severity="Severity.Warning" Dense="true" Class="mb-4">
                    @L["Password_ResetInvalidLink"]
                </MudAlert>

                <MudButton Variant="Variant.Outlined"
                           Class="auth-btn-outline"
                           Href="/forgot-password">
                    @L["Password_BackToLogin"]
                </MudButton>
            }
            else
            {
                <EditForm Model="_model"
                          OnValidSubmit="SubmitResetAsync"
                          OnInvalidSubmit="InvalidSubmit">
                    <FluentValidationValidator DisableAssemblyScanning="true" />

                    <MudText Class="mb-3 opacity-80">
                        @L["Password_ResetSubtitle"] <b>@_model.Email</b>.
                    </MudText>

                    <MudTextField T="string"
                                  Variant="Variant.Filled"
                                  Label="@L["Password_ResetEmail"]"
                                  Value="@_model.Email"
                                  For="@(()=>_model.Email)"
                                  ReadOnly="true"
                                  Disabled="true"
                                  Adornment="Adornment.Start"
                                  AdornmentIcon="@Icons.Material.Filled.Email" />

                    <MudTextField class="mt-4"
                                  T="string"
                                  Variant="Variant.Filled"
                                  Label="@L["Password_New"]"
                                  @bind-Value="_model.NewPassword"
                                  For="@(()=>_model.NewPassword)"
                                  InputType="@(_show1 ? InputType.Text : InputType.Password)"
                                  Disabled="@_busy"
                                  Adornment="Adornment.End"
                                  AdornmentIcon="@(_show1 ? Icons.Material.Filled.VisibilityOff : Icons.Material.Filled.Visibility)"
                                  OnAdornmentClick="@(()=> _show1 = !_show1)" />

                    <MudTextField class="mt-4"
                                  T="string"
                                  Variant="Variant.Filled"
                                  Label="@L["Password_Confirm"]"
                                  @bind-Value="_model.Confirm"
                                  For="@(()=>_model.Confirm)"
                                  InputType="@(_show2 ? InputType.Text : InputType.Password)"
                                  Disabled="@_busy"
                                  Adornment="Adornment.End"
                                  AdornmentIcon="@(_show2 ? Icons.Material.Filled.VisibilityOff : Icons.Material.Filled.Visibility)"
                                  OnAdornmentClick="@(()=> _show2 = !_show2)" />

                    <MudStack Row="true" Spacing="2" Class="mt-6">
                        <MudButton Variant="Variant.Filled"
                                   Class="auth-btn"
                                   ButtonType="ButtonType.Submit"
                                   Disabled="@_busy">
                            @(_busy? L["Register_Working"] : L["Password_Save"])
                        </MudButton>

                        <MudButton Variant="Variant.Outlined"
                                   Class="auth-btn-outline"
                                   Href="/login"
                                   Disabled="@_busy">
                            @L["Password_GoLogin"]
                        </MudButton>
                    </MudStack>
                </EditForm>
            }
        </div>
    </div>
</MudPaper>

@code {
    [SupplyParameterFromQuery(Name = "email")] public string? Email { get; set; }
    [SupplyParameterFromQuery(Name = "token")] public string? Token { get; set; }

    private bool _busy, _show1, _show2, _hasQueryParams;
    private ResetModel _model = new();

    protected override void OnParametersSet()
    {
        _model.Email = Email ?? string.Empty;
        _model.Token = Token ?? string.Empty;
        _hasQueryParams = !string.IsNullOrWhiteSpace(_model.Email) && !string.IsNullOrWhiteSpace(_model.Token);
    }

    private void InvalidSubmit(EditContext ctx)
    {
        var first = ctx.GetValidationMessages().FirstOrDefault() ?? L["Err_Generic"];
        Snackbar.Add(first, Severity.Warning);
    }

    private async Task SubmitResetAsync()
    {
        _busy = true;
        try
        {
            await Api.Users_ResetPasswordAsync(new ResetPasswordDTO
            {
                Email = _model.Email,
                Token = _model.Token,
                NewPassword = _model.NewPassword
            });

            Snackbar.Add(L["Password_ResetDone"], Severity.Success);
            Nav.NavigateTo("/login");
        }
        catch (Exception ex)
        {
            ApiErrorHelper.Handle(ex, Snackbar, L, Nav);
        }
        finally
        {
            _busy = false;
        }
    }
}

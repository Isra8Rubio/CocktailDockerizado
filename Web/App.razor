@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using System.Reflection
@using MudBlazor

@inject IJSRuntime JS
@inject NavigationManager Nav

@if (!_bootstrapped)
{
    <div style="height:100vh;display:flex;align-items:center;justify-content:center;">
        <MudProgressCircular Indeterminate="true" Size="Size.Large" />
    </div>
}
else
{
    <CascadingAuthenticationState>
        <!-- Proveedores MudBlazor -->
        <MudThemeProvider />
        <MudDialogProvider />
        <MudSnackbarProvider />
        <MudPopoverProvider />

        <!-- Enrutado -->
        <Router AppAssembly="@typeof(Program).Assembly">
            <Found Context="routeData">
                <AuthorizeRouteView RouteData="@routeData" DefaultLayout="@typeof(MainLayout)">
                    <NotAuthorized Context="authState">
                        @if (!(authState?.User?.Identity?.IsAuthenticated ?? false))
                        {
                            if (IsAnonymous(routeData.PageType))
                            {
                                <RouteView RouteData="@routeData" DefaultLayout="@typeof(MainLayout)" />
                            }
                            else
                            {
                                <RedirectToLogin ReturnUrl="@Nav.ToBaseRelativePath(Nav.Uri)" />
                            }
                        }
                        else
                        {
                            <MudText>Not authorized.</MudText>
                        }
                    </NotAuthorized>

                    <Authorizing>
                        <div style="height:40vh;display:flex;align-items:center;justify-content:center;">
                            <MudProgressCircular Indeterminate="true" />
                        </div>
                    </Authorizing>
                </AuthorizeRouteView>
            </Found>

            <NotFound>
                <LayoutView Layout="@typeof(MainLayout)">
                    <MudText Typo="Typo.h6">Not found</MudText>
                </LayoutView>
            </NotFound>
        </Router>
    </CascadingAuthenticationState>
}

@code {
    // ---------- Estado de arranque ----------
    private bool _bootstrapped;

    // ---------- Bootstrap: restaurar token antes del router ----------
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var token = await JS.InvokeAsync<string?>("localStorage.getItem", "authToken")
                        ?? await JS.InvokeAsync<string?>("sessionStorage.getItem", "authToken");

            API.APIService.APIClient.Token = token;

            _bootstrapped = true;
            StateHasChanged();
        }
    }

    // ---------- Utilidades ----------
    private static bool IsAnonymous(Type pageType) =>
        pageType.GetCustomAttributes(typeof(AllowAnonymousAttribute), inherit: true).Any();
}
